// 상품 모델
class Product {
  final String id;
  final String name;
  final String description;
  final double price;
  final double? salePrice;
  final DateTime? saleEndDate;
  final int stockQuantity;
  final String category;
  final String subCategory;
  final String brand;
  final List<String> images;
  final List<String> tags;
  final List<ProductVariant> variants;
  final ProductSpecification specifications;
  final List<ProductReview> reviews;
  final double averageRating;
  final int reviewCount;
  final bool isActive;
  final bool isFeatured;
  final DateTime createdAt;
  final DateTime updatedAt;
  final String sku;
  final double weight;
  final Map<String, String> dimensions;
  final bool requiresShipping;
  final ShippingDetails shippingDetails;
  final List<String> relatedProducts;

  Product({
    required this.id,
    required this.name,
    required this.description,
    required this.price,
    this.salePrice,
    this.saleEndDate,
    required this.stockQuantity,
    required this.category,
    required this.subCategory,
    required this.brand,
    required this.images,
    required this.tags,
    required this.variants,
    required this.specifications,
    required this.reviews,
    required this.averageRating,
    required this.reviewCount,
    required this.isActive,
    required this.isFeatured,
    required this.createdAt,
    required this.updatedAt,
    required this.sku,
    required this.weight,
    required this.dimensions,
    required this.requiresShipping,
    required this.shippingDetails,
    required this.relatedProducts,
  });

  factory Product.fromJson(Map<String, dynamic> json) {
    return Product(
      id: json['id'],
      name: json['name'],
      description: json['description'],
      price: json['price'],
      salePrice: json['salePrice'],
      saleEndDate: json['saleEndDate'] != null
          ? DateTime.parse(json['saleEndDate'])
          : null,
      stockQuantity: json['stockQuantity'],
      category: json['category'],
      subCategory: json['subCategory'],
      brand: json['brand'],
      images: List<String>.from(json['images']),
      tags: List<String>.from(json['tags']),
      variants: (json['variants'] as List)
          .map((variant) => ProductVariant.fromJson(variant))
          .toList(),
      specifications: ProductSpecification.fromJson(json['specifications']),
      reviews: (json['reviews'] as List)
          .map((review) => ProductReview.fromJson(review))
          .toList(),
      averageRating: json['averageRating'],
      reviewCount: json['reviewCount'],
      isActive: json['isActive'],
      isFeatured: json['isFeatured'],
      createdAt: DateTime.parse(json['createdAt']),
      updatedAt: DateTime.parse(json['updatedAt']),
      sku: json['sku'],
      weight: json['weight'],
      dimensions: Map<String, String>.from(json['dimensions']),
      requiresShipping: json['requiresShipping'],
      shippingDetails: ShippingDetails.fromJson(json['shippingDetails']),
      relatedProducts: List<String>.from(json['relatedProducts']),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'price': price,
      'salePrice': salePrice,
      'saleEndDate': saleEndDate?.toIso8601String(),
      'stockQuantity': stockQuantity,
      'category': category,
      'subCategory': subCategory,
      'brand': brand,
      'images': images,
      'tags': tags,
      'variants': variants.map((variant) => variant.toJson()).toList(),
      'specifications': specifications.toJson(),
      'reviews': reviews.map((review) => review.toJson()).toList(),
      'averageRating': averageRating,
      'reviewCount': reviewCount,
      'isActive': isActive,
      'isFeatured': isFeatured,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt.toIso8601String(),
      'sku': sku,
      'weight': weight,
      'dimensions': dimensions,
      'requiresShipping': requiresShipping,
      'shippingDetails': shippingDetails.toJson(),
      'relatedProducts': relatedProducts,
    };
  }
}

// 상품 변형 모델
class ProductVariant {
  final String id;
  final String name;
  final Map<String, String> attributes;
  final double priceAdjustment;
  final int stockQuantity;
  final String sku;
  final String? image;
  final bool isAvailable;
  final double weight;
  final Map<String, String> dimensions;

  ProductVariant({
    required this.id,
    required this.name,
    required this.attributes,
    required this.priceAdjustment,
    required this.stockQuantity,
    required this.sku,
    this.image,
    required this.isAvailable,
    required this.weight,
    required this.dimensions,
  });

  factory ProductVariant.fromJson(Map<String, dynamic> json) {
    return ProductVariant(
      id: json['id'],
      name: json['name'],
      attributes: Map<String, String>.from(json['attributes']),
      priceAdjustment: json['priceAdjustment'],
      stockQuantity: json['stockQuantity'],
      sku: json['sku'],
      image: json['image'],
      isAvailable: json['isAvailable'],
      weight: json['weight'],
      dimensions: Map<String, String>.from(json['dimensions']),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'attributes': attributes,
      'priceAdjustment': priceAdjustment,
      'stockQuantity': stockQuantity,
      'sku': sku,
      'image': image,
      'isAvailable': isAvailable,
      'weight': weight,
      'dimensions': dimensions,
    };
  }
}

// 상품 사양 모델
class ProductSpecification {
  final Map<String, String> technicalDetails;
  final Map<String, List<String>> features;
  final List<String> materials;
  final Map<String, String> careInstructions;
  final Map<String, String> warranty;
  final List<String> certificates;
  final Map<String, dynamic> additionalInfo;

  ProductSpecification({
    required this.technicalDetails,
    required this.features,
    required this.materials,
    required this.careInstructions,
    required this.warranty,
    required this.certificates,
    required this.additionalInfo,
  });

  factory ProductSpecification.fromJson(Map<String, dynamic> json) {
    return ProductSpecification(
      technicalDetails: Map<String, String>.from(json['technicalDetails']),
      features: Map<String, List<String>>.from(json['features']),
      materials: List<String>.from(json['materials']),
      careInstructions: Map<String, String>.from(json['careInstructions']),
      warranty: Map<String, String>.from(json['warranty']),
      certificates: List<String>.from(json['certificates']),
      additionalInfo: json['additionalInfo'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'technicalDetails': technicalDetails,
      'features': features,
      'materials': materials,
      'careInstructions': careInstructions,
      'warranty': warranty,
      'certificates': certificates,
      'additionalInfo': additionalInfo,
    };
  }
}

// 배송 상세 모델
class ShippingDetails {
  final bool isFreeShipping;
  final List<String> excludedCountries;
  final Map<String, double> shippingRates;
  final bool requiresSignature;
  final String handlingTime;
  final List<String> shippingMethods;
  final Map<String, List<String>> restrictions;
  final bool internationalShipping;
  final Map<String, dynamic> customRequirements;

  ShippingDetails({
    required this.isFreeShipping,
    required this.excludedCountries,
    required this.shippingRates,
    required this.requiresSignature,
    required this.handlingTime,
    required this.shippingMethods,
    required this.restrictions,
    required this.internationalShipping,
    required this.customRequirements,
  });

  factory ShippingDetails.fromJson(Map<String, dynamic> json) {
    return ShippingDetails(
      isFreeShipping: json['isFreeShipping'],
      excludedCountries: List<String>.from(json['excludedCountries']),
      shippingRates: Map<String, double>.from(json['shippingRates']),
      requiresSignature: json['requiresSignature'],
      handlingTime: json['handlingTime'],
      shippingMethods: List<String>.from(json['shippingMethods']),
      restrictions: Map<String, List<String>>.from(json['restrictions']),
      internationalShipping: json['internationalShipping'],
      customRequirements: json['customRequirements'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'isFreeShipping': isFreeShipping,
      'excludedCountries': excludedCountries,
      'shippingRates': shippingRates,
      'requiresSignature': requiresSignature,
      'handlingTime': handlingTime,
      'shippingMethods': shippingMethods,
      'restrictions': restrictions,
      'internationalShipping': internationalShipping,
      'customRequirements': customRequirements,
    };
  }
}

// 상품 리뷰 모델
class ProductReview {
  final String id;
  final String userId;
  final String username;
  final double rating;
  final String title;
  final String content;
  final List<String> images;
  final DateTime createdAt;
  final bool verified;
  final int helpfulCount;
  final List<String> tags;
  final Map<String, int> ratingBreakdown;
  final bool highlighted;
  final List<ReviewComment> comments;

  ProductReview({
    required this.id,
    required this.userId,
    required this.username,
    required this.rating,
    required this.title,
    required this.content,
    required this.images,
    required this.createdAt,
    required this.verified,
    required this.helpfulCount,
    required this.tags,
    required this.ratingBreakdown,
    required this.highlighted,
    required this.comments,
  });

  factory ProductReview.fromJson(Map<String, dynamic> json) {
    return ProductReview(
      id: json['id'],
      userId: json['userId'],
      username: json['username'],
      rating: json['rating'],
      title: json['title'],
      content: json['content'],
      images: List<String>.from(json['images']),
      createdAt: DateTime.parse(json['createdAt']),
      verified: json['verified'],
      helpfulCount: json['helpfulCount'],
      tags: List<String>.from(json['tags']),
      ratingBreakdown: Map<String, int>.from(json['ratingBreakdown']),
      highlighted: json['highlighted'],
      comments: (json['comments'] as List)
          .map((comment) => ReviewComment.fromJson(comment))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'username': username,
      'rating': rating,
      'title': title,
      'content': content,
      'images': images,
      'createdAt': createdAt.toIso8601String(),
      'verified': verified,
      'helpfulCount': helpfulCount,
      'tags': tags,
      'ratingBreakdown': ratingBreakdown,
      'highlighted': highlighted,
      'comments': comments.map((comment) => comment.toJson()).toList(),
    };
  }
}

// 리뷰 댓글 모델
class ReviewComment {
  final String id;
  final String userId;
  final String username;
  final String content;
  final DateTime createdAt;
  final bool isStaffResponse;
  final int helpfulCount;
  final bool highlighted;

  ReviewComment({
    required this.id,
    required this.userId,
    required this.username,
    required this.content,
    required this.createdAt,
    required this.isStaffResponse,
    required this.helpfulCount,
    required this.highlighted,
  });

  factory ReviewComment.fromJson(Map<String, dynamic> json) {
    return ReviewComment(
      id: json['id'],
      userId: json['userId'],
      username: json['username'],
      content: json['content'],
      createdAt: DateTime.parse(json['createdAt']),
      isStaffResponse: json['isStaffResponse'],
      helpfulCount: json['helpfulCount'],
      highlighted: json['highlighted'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'username': username,
      'content': content,
      'createdAt': createdAt.toIso8601String(),
      'isStaffResponse': isStaffResponse,
      'helpfulCount': helpfulCount,
      'highlighted': highlighted,
    };
  }
}